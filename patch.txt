diff --git a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data.sln.DotSettings b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data.sln.DotSettings
index e8215656d..950d221fc 100644
--- a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data.sln.DotSettings
+++ b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data.sln.DotSettings
@@ -93,8 +93,11 @@
 	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_CODE/@EntryValue">1</s:Int64>
 	<s:Int64 x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/KEEP_BLANK_LINES_IN_DECLARATIONS/@EntryValue">1</s:Int64>
 	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/LINE_FEED_AT_FILE_END/@EntryValue">True</s:Boolean>
+	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_ACCESSOR_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue">NEVER</s:String>
 	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE/@EntryValue">False</s:Boolean>
+	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE_EX/@EntryValue">NEVER</s:String>
 	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_ACCESSOR_ATTRIBUTE_ON_SAME_LINE/@EntryValue">False</s:Boolean>
+	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/PLACE_SIMPLE_EMBEDDED_STATEMENT_ON_SAME_LINE/@EntryValue">NEVER</s:String>
 	<s:String x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/SIMPLE_EMBEDDED_STATEMENT_STYLE/@EntryValue">LINE_BREAK</s:String>
 	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_DECLARATION_LPAR/@EntryValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/CodeStyle/CodeFormatting/CSharpFormat/WRAP_AFTER_INVOCATION_LPAR/@EntryValue">True</s:Boolean>
@@ -365,8 +368,12 @@ limitations under the License.&#xD;
 	<s:Boolean x:Key="/Default/Environment/Feedback/ShouldPrompt/@EntryValue">False</s:Boolean>
 	<s:Int64 x:Key="/Default/Environment/Hierarchy/GeneratedFilesCacheKey/Timestamp/@EntryValue">6</s:Int64>
 	<s:String x:Key="/Default/Environment/Hierarchy/PsiConfigurationSettingsKey/CustomLocation/@EntryValue">C:\Users\przybjw\AppData\Local\JetBrains\Transient\ReSharperPlatformVs15\v08_c19b1865\SolutionCaches</s:String>
+	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpKeepExistingMigration/@EntryIndexedValue">True</s:Boolean>
+	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpPlaceEmbeddedOnSameLineMigration/@EntryIndexedValue">True</s:Boolean>
+	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ECSharpUseContinuousIndentInsideBracesMigration/@EntryIndexedValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAddAccessorOwnerDeclarationBracesMigration/@EntryIndexedValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EAlwaysTreatStructAsNotReorderableMigration/@EntryIndexedValue">True</s:Boolean>
+	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002ECSharpPlaceAttributeOnSameLineMigration/@EntryIndexedValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateBlankLinesAroundFieldToBlankLinesAroundProperty/@EntryIndexedValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002ECSharp_002ECodeStyle_002ESettingsUpgrade_002EMigrateThisQualifierSettings/@EntryIndexedValue">True</s:Boolean>
 	<s:Boolean x:Key="/Default/Environment/SettingsMigration/IsMigratorApplied/=JetBrains_002EReSharper_002EPsi_002EJavaScript_002ECodeStyle_002ESettingsUpgrade_002EJsParsFormattingSettingsUpgrader/@EntryIndexedValue">True</s:Boolean>
diff --git a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.ExecutableCommand.cs b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.ExecutableCommand.cs
index 7b597b388..c5cd97881 100644
--- a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.ExecutableCommand.cs
+++ b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.ExecutableCommand.cs
@@ -13,9 +13,12 @@
 // limitations under the License.
 
 using Google.Api.Gax;
+using Google.Api.Gax.Grpc;
 using Google.Cloud.Spanner.Admin.Database.V1;
+using Google.Cloud.Spanner.Admin.Instance.V1;
 using Google.Cloud.Spanner.Common.V1;
 using Google.Cloud.Spanner.V1;
+using Google.Protobuf.Collections;
 using Google.Protobuf.WellKnownTypes;
 using Grpc.Core;
 using System;
@@ -178,6 +181,44 @@ namespace Google.Cloud.Spanner.Data
                 return await transaction.ExecuteDmlAsync(request, cancellationToken, CommandTimeout).ConfigureAwait(false);
             }
 
+            internal async Task<string> GetInstanceEndpointsAsync(int numRetries = 5)
+            {
+                // Get default endpoint.
+                InstanceAdminClient instanceAdminClient =
+                    await InstanceAdminClient.CreateAsync(Connection.Builder.EndPoint).ConfigureAwait(false);
+                // Create request for instance with endpoints.
+                FieldMask fieldMask = new FieldMask { Paths = {"endpoint_uris"} };
+                GetInstanceRequest request = new GetInstanceRequest
+                {
+                    InstanceName = new InstanceName(Connection.Project, Connection.SpannerInstance),
+                    FieldMask = fieldMask
+                };
+                // Initialize the call settings with exponential back-off arguments.
+                CallSettings callSettings = CreateRetryCallSettings(numRetries);
+                try
+                {
+                    // Get list of available endpoints from GetInstanceRequest.
+                    // Retry to call the GetInstance method with endpoints by exponential back off.
+                    Instance instance = instanceAdminClient.GetInstance(request, callSettings);
+                    return instance.EndpointUris.Count == 0 ? null : instance.EndpointUris[0];
+                }
+                catch (RpcException gRpcException)
+                {
+                    if (gRpcException.StatusCode == StatusCode.PermissionDenied)
+                    {
+#pragma warning disable CS1030 // #warning directive
+#warning PermissionDenied exception
+                        // Print warning message with PermissionDenied
+                        // status in Debug mode.
+                        Console.WriteLine(gRpcException.Message);
+#pragma warning restore CS1030 // #warning directive
+                        return null;
+                    }
+                    // Translate rpc errors into a Spanner exception.
+                    throw new SpannerException(gRpcException);
+                }
+            }
+
             private void ValidateConnectionAndCommandTextBuilder()
             {
                 GaxPreconditions.CheckState(Connection != null, "SpannerCommand can only be executed when a connection is assigned.");
@@ -355,6 +396,15 @@ namespace Google.Cloud.Spanner.Data
                         $"{nameof(CommandBehavior.SchemaOnly)} is not supported by Cloud Spanner.");
                 }
             }
+
+            private CallSettings CreateRetryCallSettings(int tryCount)
+            {
+                var retryBackoff = new BackoffSettings(TimeSpan.FromMilliseconds(500), TimeSpan.FromMilliseconds(5000), 2);
+                var timeoutBackoff = new BackoffSettings(TimeSpan.FromMilliseconds(60000), TimeSpan.FromMilliseconds(300000), 1.2);
+                return CallSettings.FromCallTiming(CallTiming.FromRetry(new RetrySettings(retryBackoff, timeoutBackoff, Expiration.None,
+                    (RpcException e) => e.Status.StatusCode != StatusCode.PermissionDenied && --tryCount > 0,
+                    RetrySettings.RandomJitter)));
+            }
         }
     }
 }
diff --git a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.cs b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.cs
index e748edef8..c0315688b 100644
--- a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.cs
+++ b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerCommand.cs
@@ -12,13 +12,14 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
-using Google.Api.Gax;
 using System;
 using System.Collections.Generic;
 using System.Data;
 using System.Data.Common;
 using System.Threading;
 using System.Threading.Tasks;
+using Google.Api.Gax;
+using Google.Protobuf.Collections;
 
 namespace Google.Cloud.Spanner.Data
 {
@@ -419,6 +420,11 @@ namespace Google.Cloud.Spanner.Data
         public Task<long> ExecutePartitionedUpdateAsync(CancellationToken cancellationToken = default) =>
             CreateExecutableCommand().ExecutePartitionedUpdateAsync(cancellationToken);
 
+        /// <summary>
+        /// Provide Spanner instance endpoints.
+        /// </summary>
+        public Task<RepeatedField<string>> ExecuteGetInstanceEndpointsAsync() => CreateExecutableCommand().GetInstanceEndpointsAsync();
+
         /// <summary>
         /// Creates an executable command that captures all the necessary information from this command.
         /// </summary>
diff --git a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerConnection.cs b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerConnection.cs
index 3604931bb..9406f37e6 100644
--- a/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerConnection.cs
+++ b/apis/Google.Cloud.Spanner.Data/Google.Cloud.Spanner.Data/SpannerConnection.cs
@@ -18,11 +18,15 @@ using Google.Cloud.Spanner.Common.V1;
 using Google.Cloud.Spanner.V1;
 using Google.Cloud.Spanner.V1.Internal.Logging;
 using Google.Protobuf;
+using Google.Protobuf.Collections;
 using Grpc.Core;
 using System;
+using System.Collections.Concurrent;
+using System.Collections.Generic;
 using System.ComponentModel;
 using System.Data;
 using System.Data.Common;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 
@@ -110,6 +114,11 @@ namespace Google.Cloud.Spanner.Data
 
         internal bool IsOpen => (State & ConnectionState.Open) == ConnectionState.Open;
 
+        /// <summary>
+        /// Dictionary for storing the list of endpoints by the instanceId key
+        /// </summary>
+        public static ConcurrentDictionary<string, IEnumerable<string>> Endpoints { get; set; } = new ConcurrentDictionary<string, IEnumerable<string>>();
+
         /// <summary>
         /// Creates a SpannerConnection with no datasource or credential specified.
         /// </summary>
@@ -639,6 +648,9 @@ namespace Google.Cloud.Spanner.Data
                     OnStateChange(new StateChangeEventArgs(previousState, ConnectionState.Connecting));
                     try
                     {
+
+                        await GetInstanceEndpointsAsync().ConfigureAwait(false);
+                        OverrideSpannerClientEndpoints();
                         _sessionPool = await Builder.AcquireSessionPoolAsync().ConfigureAwait(false);
                     }
                     finally
@@ -874,5 +886,49 @@ namespace Google.Cloud.Spanner.Data
 
         /// <inheritdoc />
         protected override DbProviderFactory DbProviderFactory => SpannerProviderFactory.Instance;
+
+        /// <summary>
+        /// Keep an accessible list of endpoints for the current instance.
+        /// </summary>
+        private async Task GetInstanceEndpointsAsync()
+        {
+            // Check for the presence of an environment variable
+            // if present, redefine the endpoint.
+            string resourceBaseRouteValue =
+                Environment.GetEnvironmentVariable("GOOGLE_CLOUD_ENABLE_RESOURCE_BASED_ROUTING")?.ToLower();
+            bool isRouteEnable = !string.IsNullOrEmpty(resourceBaseRouteValue) &&
+                resourceBaseRouteValue.Equals("true");
+
+            if (isRouteEnable)
+            {
+                SpannerCommand spannerCommand = new SpannerCommand(this);
+                RepeatedField<string> endpoints = await spannerCommand.ExecuteGetInstanceEndpointsAsync().ConfigureAwait(false);
+
+                if (endpoints?.Count > 0)
+                {
+                    // Save the endpoint information with instanceName key.
+                    Endpoints.GetOrAdd(Builder.SpannerInstance, key => endpoints.ToList());
+                }
+            }
+        }
+
+        /// <summary>
+        /// Override the available endpoint list for the current instance.
+        /// </summary>
+        private void OverrideSpannerClientEndpoints(string endpointUri)
+        {
+            if (Endpoints.Count > 0)
+            {
+                // Get the first endpoint url for current instanceId.
+                string endPointUri = Endpoints[Builder.SpannerInstance].FirstOrDefault();
+                // Verify the endpoint and override it.
+                if (!string.IsNullOrEmpty(endPointUri))
+                {
+                    Builder.Host = endPointUri;
+                    Builder.EndPoint.WithHost(endPointUri);
+                    Builder.EndPoint.WithPort(Builder.Port);
+                }
+            }
+        }
     }
 }
